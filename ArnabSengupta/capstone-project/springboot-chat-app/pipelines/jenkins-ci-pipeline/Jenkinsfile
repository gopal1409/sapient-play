pipeline {
    agent any
    stages {
        stage('Poll Code Repository') {
            steps {
                git credentialsId: 'git-key', url: 'git@github.com:arnabcs10/springboot-chat-app.git'
            }
        }
        stage('Build') {
            steps {
                sh 'mvn -B -DskipTest clean package'
            }
        }
        stage('Test') {            
            steps {
                junit 'target/surefire-reports/*.xml'
            }
        }
        stage('Checkstyle') {            
            steps {
                sh 'mvn checkstyle:checkstyle'
                recordIssues(tools: [checkStyle(pattern: '**/checkstyle-result.xml')])                
            }
        }
        stage('Code Coverage') {            
            steps {
                jacoco()                
            }
        }
        stage('Sonarqube Analysis'){            
            steps {
                withSonarQubeEnv('sonarqube-server') {
                    sh 'mvn clean verify sonar:sonar -Dsonar.projectKey=springboot-chat-app'
                }
                
            }
        }
        stage("SonarQube Quality Check"){
			steps{
				timeout(time:1, unit:'MINUTES'){
					waitForQualityGate abortPipeline: true, credentialsId: 'sonar-token'
				}
			}
		}
        stage('Push Artifact'){
            steps{
                script {
                 pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                        echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                        artifactPath = filesByGlob[0].path;
                }                
                nexusArtifactUploader artifacts: [[artifactId: pom.artifactId, classifier: '', file: artifactPath, type: pom.packaging, type: 'war']], credentialsId: 'nexus-cred', groupId: pom.artifactId, nexusUrl: '40.117.186.85:8081', nexusVersion: 'nexus3', protocol: 'http', repository: 'maven-snapshots', version: pom.version
            }
        }
        stage('Docker Push') {
            steps {
                script {                
                       withDockerRegistry(credentialsId: 'nexus-cred', url: 'http://40.117.186.85:8085') {
                         // some block
                        sh 'mvn compile jib:build -Djib.allowInsecureRegistries=true -DsendCredentialsOverHttp'
                       }
                }
            }
        }
    }
}