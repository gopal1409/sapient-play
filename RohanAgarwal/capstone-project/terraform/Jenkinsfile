pipeline{
    agent any
    environment {
        EX_IP = "to_be_defined"
    }
    
    stages{
        stage("Poll git"){
            steps{
                git branch: 'main', credentialsId: 'jenkins-master', url: 'git@github.com:aayvyas/terraform-azure.git'
            }
        }
        stage("Terraform init"){
            when {
                expression{action == "apply"}
            }
            steps{
                sh 'terraform init -upgrade -no-color'
            }
        }
        stage("Terraform apply"){
            when {
                expression{action == "apply"}
            }
            steps{
                sh '''
                    rm -f IP.txt
                    rm -f result.txt
                    VM_IP=$(terraform apply -auto-approve -no-color | grep "vm_ip"); echo $VM_IP >> IP.txt;
                '''
            }
        }
        stage("Extract IP, SSH "){
            
            when {
                expression{action == "apply"}
            }
            steps{
                sh '''
                    ex_ip=$(grep -E -o "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)" IP.txt >> result.txt)
                    EX_IP=$(cat result.txt)
                    ssh azureuser@$EX_IP -o StrictHostKeyChecking=no
                    
                    
                '''
            }
        }
        stage("Install Istio"){
             
            when {
                expression{action == "apply"}
            }
            steps{
                sh '''
                    EX_IP=$(cat result.txt)
                    ssh azureuser@$EX_IP -o StrictHostKeyChecking=no  -t /usr/bin/env bash <<'EOF'
                            
                        curl -L https://istio.io/downloadIstio | sh -,
                        cd istio-1.16.1/bin,
                        sudo cp istioctl /usr/bin/,
                        sudo istioctl install --set profile=demo -y
                        sudo kubectl label namespace default istio-injection=enabled
                        sudo kubectl config get-contexts
                        sudo kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml
                        sudo kubectl create serviceaccount -n kubernetes-dashboard admin-user
                        sudo kubectl create clusterrolebinding -n kubernetes-dashboard admin-user --clusterrole cluster-admin --serviceaccount=kubernetes-dashboard:admin-user
                        sudo kubectl config get-contexts
                        sudo kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml
                        sudo kubectl create serviceaccount -n kubernetes-dashboard admin-user
                        sudo kubectl create clusterrolebinding -n kubernetes-dashboard admin-user --clusterrole cluster-admin --serviceaccount=kubernetes-dashboard:admin-user
                        sudo helm repo add istio https://istio-release.storage.googleapis.com/charts
                        sudo helm repo update
                        sudo kubectl create namespace istio-system
                        sudo helm install istio-base istio/base -n istio-system
                        sudo helm install istiod istio/istiod -n istio-system --wait
                        sudo helm install istio-ingress istio/gateway -n istio-ingress --wait
                        sudo kubectl create namespace istio-ingress
                        sudo kubectl label namespace istio-ingress istio-injection=enabled
                        
                        
                        

                    
                        
                '''
            }
        }
        stage("Deploy Helm Chart"){
             
            when {
                expression{action == "apply"}
            }
            steps{
                sh '''
                    EX_IP=$(cat result.txt)
                    ssh azureuser@$EX_IP -o StrictHostKeyChecking=no  -t /usr/bin/env bash <<'EOF'
                            sudo helm repo add nginx-stable https://helm.nginx.com/stable
                            sudo helm repo update
                            sudo helm install nginx-w-istio nginx-stable/nginx-ingress
                    

                '''
            }
        }
        stage("Output"){
             
            when {
                expression{action == "apply"}
            }
            steps{
                sh '''
                    EX_IP=$(cat result.txt)
                    ssh azureuser@$EX_IP -o StrictHostKeyChecking=no  -t /usr/bin/env bash <<'EOF'
                        sudo kubectl get deploy
                        sudo kubectl describe pods
                        
                '''
            }
        }
        stage("Terraform destroy"){
            when {
                expression{action == "destroy"}
            }
            steps{
                sh 'terraform destroy -auto-approve -no-color'
            }
        }
        stage("Connect to aks"){
            when {
                expression{action == "apply"}
            }
            steps{
                sh 'az aks get-credentials --resource-group hr-dev-rg-default --name aks'
                sh 'kubectl get nodes'
            }
            
        }
        stage("Deploy Helm Chart to AKS"){
            when {
                expression{action == "apply"}
            }
            steps{
                sh '''
                    helm repo add nginx-stable https://helm.nginx.com/stable
                    helm repo update
                    helm install nginx-w-istio nginx-stable/nginx-ingress
                '''
            }
            
        }
        stage("Clean up"){
            when {
                expression{action == "apply"}
            }
            steps{
                sh '''
                    rm IP.txt
                    rm result.txt
                    sudo rm ~/.kube/config
                '''
            }
        }
        
    }
}
